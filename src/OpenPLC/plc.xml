<?xml version='1.0' encoding='utf-8'?>
<project xmlns:ns1="http://www.plcopen.org/xml/tc6_0201" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Binary-6" productName="PiPLC_DemoProduct" productVersion="1" creationDateTime="2023-12-08T21:28:31" companyURL="Binary-6.de"/>
  <contentHeader name="OpenPLC_Testing" modificationDateTime="2024-03-16T18:25:39" author="Chrismettal" language="en-US">
    <coordinateInfo>
      <fbd>
        <scaling x="10" y="10"/>
      </fbd>
      <ld>
        <scaling x="10" y="10"/>
      </ld>
      <sfc>
        <scaling x="10" y="10"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="MAIN" pouType="program">
        <interface>
          <localVars>
            <variable name="Input_I1_S0Powermeter" address="%IX0.0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Input_I2_LightSwitch" address="%IX0.1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Input_I3_EstopNO" address="%IX0.2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Input_I4_EstopNC" address="%IX0.3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Input_I5_ToggleLeft" address="%IX0.4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Input_I6_ToggleRight" address="%IX0.5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Input_I7_ButtonGreen" address="%IX0.6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Input_I8_ButtonRed" address="%IX0.7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q1_230vLight" address="%QX0.0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q2" address="%QX0.1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q3_StacklightGreen" address="%QX0.2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q4_StacklightYellow" address="%QX0.3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q5_StacklightRed" address="%QX0.4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q6" address="%QX0.5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q7" address="%QX0.6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="Output_Q8" address="%QX0.7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="PWM_0_LED1" address="%QW0">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="PWM_1_LED2" address="%QW1">
              <type>
                <UINT/>
              </type>
            </variable>
            <variable name="ModIO_Q1" address="%QX100.0">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ModIO_Q2" address="%QX100.1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ModIO_Q3" address="%QX100.2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="ModIO_Q4" address="%QX100.3">
              <type>
                <BOOL/>
              </type>
            </variable>
          </localVars>
          <localVars>
            <variable name="InitDone">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="CurrentPower">
              <type>
                <REAL/>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Current power calculated from S0 input]]></xhtml:p>
              </documentation>
            </variable>
            <variable name="msSinceLastEdge">
              <type>
                <REAL/>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Milliseconds since last edge on S0]]></xhtml:p>
              </documentation>
            </variable>
            <variable name="S0Timer">
              <type>
                <derived name="TON"/>
              </type>
              <documentation>
                <xhtml:p><![CDATA[Timer for CurrentPower measurement]]></xhtml:p>
              </documentation>
            </variable>
            <variable name="rtrigLightSwitch">
              <type>
                <derived name="R_TRIG"/>
              </type>
            </variable>
            <variable name="MachineRunning">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="tonBlinker">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="Blinker">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="FALSE"/>
              </initialValue>
            </variable>
            <variable name="rtrigStepModRelay">
              <type>
                <derived name="R_TRIG"/>
              </type>
            </variable>
            <variable name="ActiveRelay">
              <type>
                <USINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
          <localVars>
            <variable name="Arduino_LED1" address="%QX100.4">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Arduino_LED2" address="%QX100.5">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Arduino_LED3" address="%QX100.6">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Arduino_LED4" address="%QX100.7">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Arduino_Pot" address="%IW100">
              <type>
                <UINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Arduino_Butt1" address="%IW101">
              <type>
                <UINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Arduino_Butt2" address="%IW102">
              <type>
                <UINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
            <variable name="Arduino_Butt3" address="%IW103">
              <type>
                <UINT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml:p><![CDATA[(* This is a testing program to test most functions on a PiPLC                                      *)
(* Make sure to activate the "Binary-6 PiPLC" hardware layer on your PLC before uploading this code *)

IF NOT InitDone THEN
  (* Oneshots at init *)
    
  (* Set InitDone so we execute cyclic tasks starting next scan *)
  InitDone := TRUE;

ELSE
  (*----------------------------------------*)
  (* Cyclic calls after init oneshots       *)
  (*----------------------------------------*)
  (* Global blinker *)
  tonBlinker(IN := NOT tonBlinker.Q, PT := T#500ms);
  IF tonBlinker.Q THEN
    Blinker := NOT Blinker;
  END_IF;
  
  (* "Safety" handling (Yeah, not real safety, but bear with me) *)  
  IF NOT (NOT Input_I3_EstopNO AND Input_I4_EstopNC) THEN
    (* If either of the Estop channels fail, kill all power outputs *)
    Output_Q1_230vLight         := FALSE;
    Output_Q2                   := FALSE;
    Output_Q6                   := FALSE;
    Output_Q7                   := FALSE;
    Output_Q8                   := FALSE;
    
    ModIO_Q1        := FALSE;
    ModIO_Q2        := FALSE;
    ModIO_Q3        := FALSE;
    ModIO_Q4        := FALSE;
    
    Arduino_LED1    := TRUE;
    Arduino_LED2    := TRUE;
    Arduino_LED3    := TRUE;
    Arduino_LED4    := TRUE;
    
    PWM_0_LED1      := 0;
    PWM_1_LED2      := 0;
    
    ActiveRelay     := 0;
    MachineRunning  := FALSE;
    
    (* Update stacklight *)
    Output_Q3_StacklightGreen   := FALSE;
    Output_Q4_StacklightYellow  := FALSE;
    Output_Q5_StacklightRed     := TRUE;
    
  ELSE
    (* As long as Estop is good, execute regular logic *)
    
    (* S0 Current Power for 1000 imp/kWh meter*)
    (* PowerInW := 1000ms / TimeSinceLastEdge in ms * 60 s * 60 min * 1000 / 1000 imp/kwh *)
    S0Timer(IN := NOT Input_I1_S0PowerMeter, PT := T#600S);
    msSinceLastEdge := TIME_TO_REAL(S0Timer.ET);
    CurrentPower := 1000.0 / msSinceLastEdge * 3600.0;
            
    (* Light switch toggle*)
    rtrigLightswitch(CLK := Input_I2_LightSwitch);
    IF rtrigLightswitch.Q THEN
      Output_Q1_230vLight := NOT Output_Q1_230vLight;
    END_IF;

    (*----------------------------------------*)
    (* Machine Automode                       *)
    (*----------------------------------------*)
    (* Buttons to start / stop machine *)
    MachineRunning := MachineRunning OR  Input_I7_ButtonGreen;
    MachineRunning := MachineRunning AND Input_I8_ButtonRed;
    (* Automode vs Manual mode *)
    IF MachineRunning THEN
      (* Show running state in stacklight *)
      Output_Q3_StacklightGreen   := TRUE;
      Output_Q4_StacklightYellow  := FALSE;
      Output_Q5_StacklightRed     := FALSE;
    
      (* Dimming lights *)
      PWM_0_LED1 := PWM_0_LED1 + 1000;
      IF PWM_0_LED1 > 64000 THEN
        PWM_0_LED1 := 0;
      END_IF;
      PWM_1_LED2 := 65535 - PWM_0_LED1;
      
      
      rtrigStepModRelay(CLK := Blinker);
      IF rtrigStepModRelay.Q THEN
        
        ActiveRelay := ActiveRelay + 1;
        IF ActiveRelay > 4 THEN
          ActiveRelay := 1;
        END_IF;
      
        (* Modbus IO *)  
        ModIO_Q1      := ActiveRelay = 1;
        ModIO_Q2      := ActiveRelay = 2;
        ModIO_Q3      := ActiveRelay = 3;
        ModIO_Q4      := ActiveRelay = 4;
        
        (* Arduino Slave *)
        Arduino_LED1  := NOT (ActiveRelay = 1);
        Arduino_LED2  := NOT (ActiveRelay = 2);
        Arduino_LED3  := NOT (ActiveRelay = 3);
        Arduino_LED4  := NOT (ActiveRelay = 4);
        
      END_IF;

      (* 1-Wire temp probe *)
      
      
      (* I²C Servos *)
      
      
      (* EtherCAT *) 
      
    ELSE
      (* Show idle state in stacklight *)
      Output_Q3_StacklightGreen   := FALSE;
      Output_Q4_StacklightYellow  := TRUE;
      Output_Q5_StacklightRed     := FALSE;
    END_IF;
            
  END_IF;
  
END_IF;
]]></xhtml:p>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Config0">
        <resource name="Res0">
          <task name="PlcTask" priority="0" interval="T#20ms">
            <pouInstance name="instance0" typeName="MAIN"/>
          </task>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
